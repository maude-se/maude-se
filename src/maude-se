#!/usr/bin/env python3
import os
import argparse
import maudeSE.maude
from maudeSE.factory import *
from maudeSE.hook.check import *
from maudeSE.hook.search import *

if __name__ == '__main__':
    solvers = ["z3","yices","cvc5"]
    default_s = solvers[0]

    s_help = ["set an underlying SMT solver",
              "* Supported solvers: {{{}}}".format(",".join(solvers)),
              "* Usage: -s {}".format(solvers[-1]), "* Default: -s {}".format(default_s)]
    
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('file', nargs='?', type=str, help="input Maude file")
    parser.add_argument("-s", "-solver", metavar="SOLVER", nargs='?', type=str,
                        help="\n".join(s_help), default=default_s)
    parser.add_argument("-no-meta", help="no metaInterpreter", action="store_true")
    args = parser.parse_args()

    try:
        # initialize Maude interpreter

        maudeSE.maude.init(advise=False)

        # instantiate our interface
        conv, conn = Factory().create(args.s)

        # register special hooks
        hook = CheckHook(conn, conv)
        maudeSE.maude.connectEqHook('SmtCheckerSymbol', hook)

        searchHook = SearchHook(conn, conv, path=False)
        maudeSE.maude.connectEqHook('SmtSearchSymbol', searchHook)

        searchPathHook = SearchHook(conn, conv, path=True)
        maudeSE.maude.connectEqHook('SmtSearchPathSymbol', searchPathHook)

        # load preludes

        maudeSE.maude.load('smt.maude')
        maudeSE.maude.load('smt-check.maude')

        # load an input file

        if args.file is None:
            raise ValueError("should provide an input Maude file")
        
        maudeSE.maude.load(args.file)

        if args.no_meta == False:
            maudeSE.maude.load('maude-se-meta.maude')

    except ValueError as err:
        print("error: {}".format(err))